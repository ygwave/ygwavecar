from flask import Flask, render_template, request, flash, redirect, url_for
import os
from datetime import datetime
import logging

app = Flask(__name__)
app.secret_key = 'yg-auto-secret-key-2024'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
cars_db = [
    {
        'id': 1,
        'brand': 'BMW',
        'model': 'X5',
        'year': 2023,
        'price': 8500000,
        'image': 'bmw_x5.png',
        'specs': {
            'engine': '3.0L',
            'power': '249 –ª.—Å.',
            'acceleration': '6.5—Å',
            'fuel': '8.1–ª/100–∫–º'
        },
        'badge': '–ù–æ–≤–∏–Ω–∫–∞',
        'description': '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ —Å –ø–æ–ª–Ω—ã–º –∫–æ–º–ø–ª–µ–∫—Ç–æ–º –æ–ø—Ü–∏–π'
    },
    {
        'id': 2,
        'brand': 'Audi',
        'model': 'A6',
        'year': 2022,
        'price': 5200000,
        'image': 'audi_a6.png',
        'specs': {
            'engine': '2.0L',
            'power': '245 –ª.—Å.',
            'acceleration': '7.1—Å',
            'fuel': '7.8–ª/100–∫–º'
        },
        'badge': '–•–∏—Ç',
        'description': '–ë–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏'
    },
    {
        'id': 3,
        'brand': 'Mercedes',
        'model': 'E-Class',
        'year': 2023,
        'price': 7200000,
        'image': 'mercedes_eclass.png',
        'specs': {
            'engine': '2.0L',
            'power': '258 –ª.—Å.',
            'acceleration': '6.8—Å',
            'fuel': '8.2–ª/100–∫–º'
        },
        'badge': '–ü—Ä–µ–º–∏—É–º',
        'description': '–†–æ—Å–∫–æ—à–Ω—ã–π —Å–µ–¥–∞–Ω –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞'
    },
    {
        'id': 4,
        'brand': 'Toyota',
        'model': 'Camry',
        'year': 2024,
        'price': 3200000,
        'image': 'toyota_camry.png',
        'specs': {
            'engine': '2.5L',
            'power': '181 –ª.—Å.',
            'acceleration': '8.9—Å',
            'fuel': '7.1–ª/100–∫–º'
        },
        'badge': '–ù–∞–¥–µ–∂–Ω—ã–π',
        'description': '–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π —Å–µ–¥–∞–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å—é'
    },
    {
        'id': 5,
        'brand': 'Lada',
        'model': 'Vesta',
        'year': 2024,
        'price': 1500000,
        'image': 'lada_vesta.png',
        'specs': {
            'engine': '1.6L',
            'power': '106 –ª.—Å.',
            'acceleration': '11.5—Å',
            'fuel': '6.9–ª/100–∫–º'
        },
        'badge': '–í—ã–≥–æ–¥–Ω–æ',
        'description': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–¥–∞–Ω'
    }
]


@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')


@app.route('/cars')
def cars():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    brand_filter = request.args.get('brand', 'all')
    price_filter = request.args.get('price', 'all')
    year_filter = request.args.get('year', 'all')
    type_filter = request.args.get('type', 'all')

    filtered_cars = cars_db.copy()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ
    if brand_filter != 'all':
        filtered_cars = [car for car in filtered_cars if car['brand'].lower() == brand_filter.lower()]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
    if price_filter != 'all':
        if price_filter == '1-2':
            filtered_cars = [car for car in filtered_cars if 1000000 <= car['price'] <= 2000000]
        elif price_filter == '2-5':
            filtered_cars = [car for car in filtered_cars if 2000000 <= car['price'] <= 5000000]
        elif price_filter == '5+':
            filtered_cars = [car for car in filtered_cars if car['price'] > 5000000]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É
    if year_filter != 'all':
        if year_filter == '2023-2024':
            filtered_cars = [car for car in filtered_cars if car['year'] >= 2023]
        elif year_filter == '2020-2022':
            filtered_cars = [car for car in filtered_cars if 2020 <= car['year'] <= 2022]
        elif year_filter == '2017-2019':
            filtered_cars = [car for car in filtered_cars if 2017 <= car['year'] <= 2019]

    return render_template('cars.html',
                           cars=filtered_cars,
                           current_filters={
                               'brand': brand_filter,
                               'price': price_filter,
                               'year': year_filter,
                               'type': type_filter
                           })


@app.route('/about')
def about():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    team_members = [
        {
            'name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
            'role': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
            'experience': '10 –ª–µ—Ç –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–º –±–∏–∑–Ω–µ—Å–µ',
            'avatar': 'üë®‚Äçüíº'
        },
        {
            'name': '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
            'role': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
            'experience': 'MBA, 8 –ª–µ—Ç –æ–ø—ã—Ç–∞',
            'avatar': 'üë©‚Äçüíº'
        },
        {
            'name': '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
            'role': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
            'experience': '15 –ª–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã',
            'avatar': 'üë®‚Äçüîß'
        }
    ]

    certificates = [
        {'name': '–õ—É—á—à–∏–π –∞–≤—Ç–æ—Å–∞–ª–æ–Ω 2023', 'description': '–ù–∞–≥—Ä–∞–¥–∞ –æ—Ç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∞–≤—Ç–æ–¥–∏–ª–µ—Ä–æ–≤'},
        {'name': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞', 'description': 'ISO 9001:2015'},
        {'name': '–ü–∞—Ä—Ç–Ω–µ—Ä –≥–æ–¥–∞', 'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä BMW'},
        {'name': '–í—ã–±–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', 'description': '–ü–æ –≤–µ—Ä—Å–∏–∏ Auto.Ru 2023'}
    ]

    return render_template('about.html',
                           team_members=team_members,
                           certificates=certificates)


@app.route('/evaluate', methods=['GET', 'POST'])
def evaluate_car():
    """–§–æ—Ä–º–∞ –æ—Ü–µ–Ω–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if request.method == 'POST':
        brand = request.form.get('brand', '').strip()
        model = request.form.get('model', '').strip()
        year = request.form.get('year', '').strip()
        mileage = request.form.get('mileage', '').strip()
        condition = request.form.get('condition', '').strip()
        phone = request.form.get('phone', '').strip()
        additional_info = request.form.get('additional_info', '').strip()

        if not all([brand, model, year, phone]):
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error')
            return redirect(url_for('evaluate_car'))

        logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É: {brand} {model} {year}, —Ç–µ–ª: {phone}")

        message = f"""
üìã –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–¶–ï–ù–ö–£ –ê–í–¢–û

üöó –ú–∞—Ä–∫–∞: {brand}
üîß –ú–æ–¥–µ–ª—å: {model}
üìÖ –ì–æ–¥: {year}
üõ£Ô∏è –ü—Ä–æ–±–µ–≥: {mileage if mileage else '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚≠ê –°–æ—Å—Ç–æ—è–Ω–∏–µ: {get_condition_text(condition)}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}

üí¨ –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {additional_info if additional_info else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üïí –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """

        send_notification(message)
        flash('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.', 'success')
        return redirect(url_for('evaluate_car'))

    return render_template('evaluate.html')


@app.route('/contact', methods=['GET', 'POST'])
def contact():
    """–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if request.method == 'POST':
        name = request.form.get('name', '').strip()
        phone = request.form.get('phone', '').strip()
        message = request.form.get('message', '').strip()

        if not all([name, phone, message]):
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
            return redirect(url_for('contact'))

        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name}: {phone} - {message}")

        notification_message = f"""
üì© –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –°–ê–ô–¢–ê

üë§ –ò–º—è: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message}

üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """

        send_notification(notification_message)
        flash('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success')
        return redirect(url_for('contact'))

    return render_template('contact.html')


def get_condition_text(condition):
    conditions = {
        'excellent': '–û—Ç–ª–∏—á–Ω–æ–µ',
        'good': '–•–æ—Ä–æ—à–µ–µ',
        'satisfactory': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ',
        'needs_repair': '–¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞'
    }
    return conditions.get(condition, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')


def send_notification(message):
    try:
        print("=" * 50)
        print("–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:")
        print(message)
        print("=" * 50)

        with open('notifications.log', 'a', encoding='utf-8') as f:
            f.write(f"\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(message)
            f.write("\n" + "=" * 50 + "\n")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@app.context_processor
def inject_current_year():
    return {'current_year': datetime.now().year}


@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404


@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500


if __name__ == '__main__':
    os.makedirs('static/images', exist_ok=True)

    print("üöÄ YG Auto –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üìç –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +7 (903) 948-35-80")

    app.run(debug=True, host='0.0.0.0', port=5000)